const xCount = 401;
const yCount = 41;
const gridSize = 400;
const width = 700;
const height = 700;

const radius = 150;
const ramp = 1;

const svg = d3.select("#container")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append('g');

let data = d3.range(0, yCount).map(y=>
  d3.range(0, xCount).map(x=>({
  x: x*(gridSize/(xCount-1)) + (width-gridSize)/2,
  y: gridSize/(yCount-1)*y + (height-gridSize)/2,
  velocity: {x: 0, y: 0}
}))
)

let line = d3.svg.line()
          .x(d=>d.x + d.velocity.x)
          .y(d=>d.y + d.velocity.y);


let grids = svg.selectAll('g')
            .data(data)
            .enter()
            .append('g');

let nodes = grids.append('path')
           .attr('d', line)
           .style("stroke", '#000');


let Attractor = function(){
  
};

Attractor.prototype.attract = function(node, _x, _y, _strength){
  let x = _x;
  let y = _y;
  let strength = _strength;
  let dx = x - node.x;
  let dy = y - node.y;
  
  let d = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
  
  if(d > 0 && d< radius){
    let s = Math.pow(d/radius, 1/ramp);
    let f = s * 9 * strength * (1 / (s + 1) + ((s - 3) / 4)) / d;
    node.velocity.x += dy*f;
    node.velocity.y -= dx*f;
  }
}

let myAttractor = new Attractor();

function update(t){
  let x = width/2;
  let y = height/2;
  let strength = Math.sin(t/2000) * 10;
  for(let i = 0; i < yCount; i ++){
    for(let j =0; j < xCount; j ++){
      myAttractor.attract(data[i][j], x, y, strength);
    }
  }  
  grids.data(data).selectAll('path').attr('d', line);
}

d3.timer(update)



